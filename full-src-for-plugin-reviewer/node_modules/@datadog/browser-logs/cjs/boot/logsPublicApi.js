"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLogsPublicApi = makeLogsPublicApi;
const browser_core_1 = require("@datadog/browser-core");
const logger_1 = require("../domain/logger");
const commonContext_1 = require("../domain/contexts/commonContext");
const preStartLogs_1 = require("./preStartLogs");
const LOGS_STORAGE_KEY = 'logs';
function makeLogsPublicApi(startLogsImpl) {
    const customerDataTrackerManager = (0, browser_core_1.createCustomerDataTrackerManager)();
    const globalContextManager = (0, browser_core_1.createContextManager)('global context', {
        customerDataTracker: customerDataTrackerManager.getOrCreateTracker(2 /* CustomerDataType.GlobalContext */),
    });
    const userContextManager = (0, browser_core_1.createContextManager)('user', {
        customerDataTracker: customerDataTrackerManager.getOrCreateTracker(1 /* CustomerDataType.User */),
        propertiesConfig: {
            id: { type: 'string' },
            name: { type: 'string' },
            email: { type: 'string' },
        },
    });
    const accountContextManager = (0, browser_core_1.createContextManager)('account', {
        customerDataTracker: customerDataTrackerManager.getOrCreateTracker(1 /* CustomerDataType.User */),
        propertiesConfig: {
            id: { type: 'string', required: true },
            name: { type: 'string' },
        },
    });
    const trackingConsentState = (0, browser_core_1.createTrackingConsentState)();
    function getCommonContext() {
        return (0, commonContext_1.buildCommonContext)(globalContextManager, userContextManager, accountContextManager);
    }
    let strategy = (0, preStartLogs_1.createPreStartStrategy)(getCommonContext, trackingConsentState, (initConfiguration, configuration) => {
        if (initConfiguration.storeContextsAcrossPages) {
            (0, browser_core_1.storeContextManager)(configuration, globalContextManager, LOGS_STORAGE_KEY, 2 /* CustomerDataType.GlobalContext */);
            (0, browser_core_1.storeContextManager)(configuration, userContextManager, LOGS_STORAGE_KEY, 1 /* CustomerDataType.User */);
            (0, browser_core_1.storeContextManager)(configuration, accountContextManager, LOGS_STORAGE_KEY, 4 /* CustomerDataType.Account */);
        }
        const startLogsResult = startLogsImpl(initConfiguration, configuration, getCommonContext, trackingConsentState);
        strategy = createPostStartStrategy(initConfiguration, startLogsResult);
        return startLogsResult;
    });
    const customLoggers = {};
    const mainLogger = new logger_1.Logger((...params) => strategy.handleLog(...params), customerDataTrackerManager.createDetachedTracker());
    return (0, browser_core_1.makePublicApi)({
        logger: mainLogger,
        init: (0, browser_core_1.monitor)((initConfiguration) => strategy.init(initConfiguration)),
        setTrackingConsent: (0, browser_core_1.monitor)((trackingConsent) => {
            trackingConsentState.update(trackingConsent);
            (0, browser_core_1.addTelemetryUsage)({ feature: 'set-tracking-consent', tracking_consent: trackingConsent });
        }),
        getGlobalContext: (0, browser_core_1.monitor)(() => globalContextManager.getContext()),
        setGlobalContext: (0, browser_core_1.monitor)((context) => globalContextManager.setContext(context)),
        setGlobalContextProperty: (0, browser_core_1.monitor)((key, value) => globalContextManager.setContextProperty(key, value)),
        removeGlobalContextProperty: (0, browser_core_1.monitor)((key) => globalContextManager.removeContextProperty(key)),
        clearGlobalContext: (0, browser_core_1.monitor)(() => globalContextManager.clearContext()),
        createLogger: (0, browser_core_1.monitor)((name, conf = {}) => {
            customLoggers[name] = new logger_1.Logger((...params) => strategy.handleLog(...params), customerDataTrackerManager.createDetachedTracker(), (0, browser_core_1.sanitize)(name), conf.handler, conf.level, (0, browser_core_1.sanitize)(conf.context));
            return customLoggers[name];
        }),
        getLogger: (0, browser_core_1.monitor)((name) => customLoggers[name]),
        getInitConfiguration: (0, browser_core_1.monitor)(() => (0, browser_core_1.deepClone)(strategy.initConfiguration)),
        getInternalContext: (0, browser_core_1.monitor)((startTime) => strategy.getInternalContext(startTime)),
        setUser: (0, browser_core_1.monitor)(userContextManager.setContext),
        getUser: (0, browser_core_1.monitor)(userContextManager.getContext),
        setUserProperty: (0, browser_core_1.monitor)(userContextManager.setContextProperty),
        removeUserProperty: (0, browser_core_1.monitor)(userContextManager.removeContextProperty),
        clearUser: (0, browser_core_1.monitor)(userContextManager.clearContext),
        setAccount: (0, browser_core_1.monitor)(accountContextManager.setContext),
        getAccount: (0, browser_core_1.monitor)(accountContextManager.getContext),
        setAccountProperty: (0, browser_core_1.monitor)(accountContextManager.setContextProperty),
        removeAccountProperty: (0, browser_core_1.monitor)(accountContextManager.removeContextProperty),
        clearAccount: (0, browser_core_1.monitor)(accountContextManager.clearContext),
    });
}
function createPostStartStrategy(initConfiguration, startLogsResult) {
    return {
        init: (initConfiguration) => {
            (0, browser_core_1.displayAlreadyInitializedError)('DD_LOGS', initConfiguration);
        },
        initConfiguration,
        ...startLogsResult,
    };
}
//# sourceMappingURL=logsPublicApi.js.map