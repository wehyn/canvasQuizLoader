import { noop, ErrorSource, trackRuntimeError, Observable } from '@datadog/browser-core';
import { StatusType } from '../logger/isAuthorized';
import { createErrorFieldFromRawError } from '../createErrorFieldFromRawError';
export function startRuntimeErrorCollection(configuration, lifeCycle) {
    if (!configuration.forwardErrorsToLogs) {
        return { stop: noop };
    }
    const rawErrorObservable = new Observable();
    const { stop: stopRuntimeErrorTracking } = trackRuntimeError(rawErrorObservable);
    const rawErrorSubscription = rawErrorObservable.subscribe((rawError) => {
        lifeCycle.notify(0 /* LifeCycleEventType.RAW_LOG_COLLECTED */, {
            rawLogsEvent: {
                message: rawError.message,
                date: rawError.startClocks.timeStamp,
                error: createErrorFieldFromRawError(rawError),
                origin: ErrorSource.SOURCE,
                status: StatusType.error,
            },
            messageContext: rawError.context,
        });
    });
    return {
        stop: () => {
            stopRuntimeErrorTracking();
            rawErrorSubscription.unsubscribe();
        },
    };
}
//# sourceMappingURL=runtimeErrorCollection.js.map