import { Metadata, SpanTags } from './interfaces';
export declare const CI_ENGINES: {
    APPVEYOR: string;
    AWSCODEPIPELINE: string;
    AZURE: string;
    BITBUCKET: string;
    BITRISE: string;
    BUDDY: string;
    BUILDKITE: string;
    CIRCLECI: string;
    CODEFRESH: string;
    GITHUB: string;
    GITLAB: string;
    JENKINS: string;
    TRAVIS: string;
    TEAMCITY: string;
};
export declare const PROVIDER_TO_DISPLAY_NAME: {
    github: string;
};
export declare const getCISpanTags: () => SpanTags | undefined;
export declare const getCIMetadata: (tagSizeLimits?: {
    "ci.job.name"?: number | undefined;
    "ci.job.url"?: number | undefined;
    "ci.pipeline.id"?: number | undefined;
    "ci.pipeline.name"?: number | undefined;
    "ci.pipeline.number"?: number | undefined;
    "ci.pipeline.url"?: number | undefined;
    "ci.provider.name"?: number | undefined;
    "ci.stage.name"?: number | undefined;
    "ci.workspace_path"?: number | undefined;
    "git.branch"?: number | undefined;
    "git.repository_url"?: number | undefined;
    "git.commit.sha"?: number | undefined;
    "git.tag"?: number | undefined;
    "git.commit.author.email"?: number | undefined;
    "git.commit.author.name"?: number | undefined;
    "git.commit.author.date"?: number | undefined;
    "git.commit.message"?: number | undefined;
    "git.commit.committer.date"?: number | undefined;
    "git.commit.committer.email"?: number | undefined;
    "git.commit.committer.name"?: number | undefined;
    "_dd.ci.env_vars"?: number | undefined;
    "ci.node.name"?: number | undefined;
    "ci.node.labels"?: number | undefined;
    service?: number | undefined;
    "git.commit.head_sha"?: number | undefined;
    "git.commit.base_ref"?: number | undefined;
    "git.pull_request.base_branch"?: number | undefined;
    "git.pull_request.base_branch_sha"?: number | undefined;
} | undefined) => Metadata | undefined;
export declare const getCIEnv: () => {
    ciEnv: Record<string, string>;
    provider: string;
};
export declare const getCIProvider: () => string;
