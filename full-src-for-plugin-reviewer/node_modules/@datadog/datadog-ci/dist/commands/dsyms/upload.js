"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const glob_1 = __importDefault(require("glob"));
const constants_1 = require("../../constants");
const apikey_1 = require("../../helpers/apikey");
const concurrency_1 = require("../../helpers/concurrency");
const env_1 = require("../../helpers/env");
const errors_1 = require("../../helpers/errors");
const fips_1 = require("../../helpers/fips");
const metrics_1 = require("../../helpers/metrics");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const validation = __importStar(require("../../helpers/validation"));
const validation_1 = require("../../helpers/validation");
const version_1 = require("../../helpers/version");
const interfaces_1 = require("./interfaces");
const renderer_1 = require("./renderer");
const utils_2 = require("./utils");
class UploadCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.basePath = clipanion_1.Option.String({ required: true });
        this.configPath = clipanion_1.Option.String('--config');
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.maxConcurrency = clipanion_1.Option.String('--max-concurrency', '20', { validator: validation.isInteger() });
        this.cliVersion = version_1.version;
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
        this.config = {
            datadogSite: 'datadoghq.com',
        };
        this.compressDSYMsToDirectory = (dsyms, directoryPath) => __awaiter(this, void 0, void 0, function* () {
            yield fs_1.promises.mkdir(directoryPath, { recursive: true });
            return Promise.all(dsyms.map((dsym) => __awaiter(this, void 0, void 0, function* () {
                const archivePath = (0, utils_1.buildPath)(directoryPath, `${dsym.slices[0].uuid}.zip`);
                yield (0, utils_2.zipDirectoryToArchive)(dsym.bundlePath, archivePath);
                return new interfaces_1.CompressedDsym(archivePath, dsym);
            })));
        });
        this.findDSYMsInDirectory = (directoryPath) => __awaiter(this, void 0, void 0, function* () {
            const dsyms = [];
            for (const dSYMPath of glob_1.default.sync((0, utils_1.buildPath)(directoryPath, '**/*.dSYM'))) {
                try {
                    const stdout = (yield (0, utils_2.executeDwarfdump)(dSYMPath)).stdout;
                    const archSlices = this.parseDwarfdumpOutput(stdout);
                    dsyms.push({ bundlePath: dSYMPath, slices: archSlices });
                }
                catch (_c) {
                    this.context.stdout.write((0, renderer_1.renderInvalidDsymWarning)(dSYMPath));
                }
            }
            return Promise.all(dsyms);
        });
        /**
         * Parses the output of `dwarfdump --uuid` command (ref.: https://www.unix.com/man-page/osx/1/dwarfdump/).
         * It returns one or many arch slices read from the output.
         *
         * Example `dwarfdump --uuid` output:
         * ```
         * $ dwarfdump --uuid DDTest.framework.dSYM
         * UUID: C8469F85-B060-3085-B69D-E46C645560EA (armv7) DDTest.framework.dSYM/Contents/Resources/DWARF/DDTest
         * UUID: 06EE3D68-D605-3E92-B92D-2F48C02A505E (arm64) DDTest.framework.dSYM/Contents/Resources/DWARF/DDTest
         * ```
         */
        this.parseDwarfdumpOutput = (output) => {
            const lineRegexp = /UUID: ([0-9A-F]{8}-(?:[0-9A-F]{4}-){3}[0-9A-F]{12}) \(([a-z0-9_]+)\) (.+)/;
            return output
                .split('\n')
                .map((line) => {
                const match = line.match(lineRegexp);
                return match ? [{ arch: match[2], objectPath: match[3], uuid: match[1] }] : [];
            })
                .reduce((acc, nextSlice) => acc.concat(nextSlice), []);
        };
        /**
         * It takes fat dSYM as input and returns multiple dSYMs by extracting **each arch**
         * to separate dSYM file. New files are saved to `intermediatePath` and named by their object uuid (`<uuid>.dSYM`).
         *
         * For example, given `<source path>/Foo.dSYM/Contents/Resources/DWARF/Foo` dSYM with two arch slices: `arm64` (uuid1)
         * and `x86_64` (uuid2), it will:
         * - create `<intermediate path>/<uuid1>.dSYM/Contents/Resources/DWARF/Foo` for `arm64`,
         * - create `<intermediate path>/<uuid2>.dSYM/Contents/Resources/DWARF/Foo` for `x86_64`.
         */
        this.thinDSYM = (dsym, intermediatePath) => __awaiter(this, void 0, void 0, function* () {
            const slimmedDSYMs = [];
            for (const slice of dsym.slices) {
                try {
                    const newDSYMBundleName = `${slice.uuid}.dSYM`;
                    const newDSYMBundlePath = (0, utils_1.buildPath)(intermediatePath, newDSYMBundleName);
                    const newObjectPath = (0, utils_1.buildPath)(newDSYMBundlePath, path_1.default.relative(dsym.bundlePath, slice.objectPath));
                    // Extract arch slice:
                    yield fs_1.promises.mkdir(path_1.default.dirname(newObjectPath), { recursive: true });
                    yield (0, utils_2.executeLipo)(slice.objectPath, slice.arch, newObjectPath);
                    // The original dSYM bundle can also include `Info.plist` file, so copy it to the `<uuid>.dSYM` as well.
                    // Ref.: https://opensource.apple.com/source/lldb/lldb-179.1/www/symbols.html
                    const infoPlistPath = glob_1.default.sync((0, utils_1.buildPath)(dsym.bundlePath, '**/Info.plist'))[0];
                    if (infoPlistPath) {
                        const newInfoPlistPath = (0, utils_1.buildPath)(newDSYMBundlePath, path_1.default.relative(dsym.bundlePath, infoPlistPath));
                        yield fs_1.promises.mkdir(path_1.default.dirname(newInfoPlistPath), { recursive: true });
                        yield fs_1.promises.copyFile(infoPlistPath, newInfoPlistPath);
                    }
                    slimmedDSYMs.push({
                        bundlePath: newDSYMBundlePath,
                        slices: [{ arch: slice.arch, uuid: slice.uuid, objectPath: newObjectPath }],
                    });
                }
                catch (_d) {
                    this.context.stdout.write((0, renderer_1.renderDSYMSlimmingFailure)(dsym, slice));
                }
            }
            return Promise.all(slimmedDSYMs);
        });
        /**
         * It takes `N` dSYMs and returns `N` or more dSYMs. If a dSYM includes more than one arch slice,
         * it will be thinned by extracting each arch to a new dSYM in `intermediatePath`.
         */
        this.thinDSYMs = (dsyms, intermediatePath) => __awaiter(this, void 0, void 0, function* () {
            yield fs_1.promises.mkdir(intermediatePath, { recursive: true });
            let slimDSYMs = [];
            for (const dsym of dsyms) {
                if (dsym.slices.length > 1) {
                    slimDSYMs = slimDSYMs.concat(yield this.thinDSYM(dsym, intermediatePath));
                }
                else {
                    slimDSYMs.push(dsym);
                }
            }
            return Promise.all(slimDSYMs);
        });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            // Normalizing the basePath to resolve .. and .
            this.basePath = path_1.default.posix.normalize(this.basePath);
            this.context.stdout.write((0, renderer_1.renderCommandInfo)(this.basePath, this.maxConcurrency, this.dryRun));
            this.config = yield (0, utils_1.resolveConfigFromFileAndEnvironment)(this.config, {
                apiKey: process.env.DATADOG_API_KEY,
                datadogSite: process.env.DATADOG_SITE,
            }, {
                configPath: this.configPath,
                defaultConfigPaths: ['datadog-ci.json', '../datadog-ci.json'],
                configFromFileCallback: (configFromFile) => {
                    (0, validation_1.checkAPIKeyOverride)(process.env.DATADOG_API_KEY, configFromFile.apiKey, this.context.stdout);
                },
            });
            const metricsLogger = (0, metrics_1.getMetricsLogger)({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                defaultTags: [`cli_version:${this.cliVersion}`],
                prefix: 'datadog.ci.dsyms.',
            });
            const apiKeyValidator = (0, apikey_1.newApiKeyValidator)({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                metricsLogger: metricsLogger.logger,
            });
            const initialTime = Date.now();
            const tmpDirectory = yield (0, utils_2.createUniqueTmpDirectory)();
            const intermediateDirectory = (0, utils_1.buildPath)(tmpDirectory, 'datadog-ci', 'dsyms', 'intermediate');
            const uploadDirectory = (0, utils_1.buildPath)(tmpDirectory, 'datadog-ci', 'dsyms', 'upload');
            this.context.stdout.write((0, renderer_1.renderCommandDetail)(intermediateDirectory, uploadDirectory));
            // The CLI input path can be a folder or `.zip` archive with `*.dSYM` files.
            // In case of `.zip`, extract it to temporary location, so it can be handled the same way as folder.
            let dSYMsSearchDirectory = this.basePath;
            if (yield (0, utils_2.isZipFile)(this.basePath)) {
                yield (0, utils_2.unzipArchiveToDirectory)(this.basePath, tmpDirectory);
                dSYMsSearchDirectory = tmpDirectory;
            }
            const dsyms = yield this.findDSYMsInDirectory(dSYMsSearchDirectory);
            // Reduce dSYMs size by extracting arch slices from fat dSYMs to separate single-arch dSYMs in intermediate location.
            // This is to avoid exceeding intake limit whenever possible.
            const slimDSYMs = yield this.thinDSYMs(dsyms, intermediateDirectory);
            // Compress each dSYM into single `.zip` archive.
            const compressedDSYMs = yield this.compressDSYMsToDirectory(slimDSYMs, uploadDirectory);
            const requestBuilder = this.getRequestBuilder();
            const uploadDSYM = this.uploadDSYM(requestBuilder, metricsLogger, apiKeyValidator);
            try {
                const results = yield (0, concurrency_1.doWithMaxConcurrency)(this.maxConcurrency, compressedDSYMs, uploadDSYM);
                const totalTime = (Date.now() - initialTime) / 1000;
                this.context.stdout.write((0, renderer_1.renderSuccessfulCommand)(results, totalTime, this.dryRun));
                metricsLogger.logger.gauge('duration', totalTime);
                return 0;
            }
            catch (error) {
                if (error instanceof errors_1.InvalidConfigurationError) {
                    this.context.stdout.write((0, renderer_1.renderConfigurationError)(error));
                    return 1;
                }
                // Otherwise unknown error, let's propagate the exception
                throw error;
            }
            finally {
                yield (0, utils_2.deleteDirectory)(tmpDirectory);
                try {
                    yield metricsLogger.flush();
                }
                catch (err) {
                    this.context.stdout.write(`WARN: ${err}\n`);
                }
            }
        });
    }
    getRequestBuilder() {
        if (!this.config.apiKey) {
            throw new errors_1.InvalidConfigurationError(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} in your environment.`);
        }
        return (0, utils_1.getRequestBuilder)({
            apiKey: this.config.apiKey,
            baseUrl: (0, utils_2.getBaseIntakeUrl)(this.config.datadogSite),
            headers: new Map([
                ['DD-EVP-ORIGIN', 'datadog-ci_dsyms'],
                ['DD-EVP-ORIGIN-VERSION', this.cliVersion],
            ]),
            overrideUrl: 'api/v2/srcmap',
        });
    }
    uploadDSYM(requestBuilder, metricsLogger, apiKeyValidator) {
        return (dSYM) => __awaiter(this, void 0, void 0, function* () {
            const payload = dSYM.asMultipartPayload();
            if (this.dryRun) {
                this.context.stdout.write(`[DRYRUN] ${(0, renderer_1.renderUpload)(dSYM)}`);
                return upload_1.UploadStatus.Success;
            }
            return (0, upload_1.upload)(requestBuilder)(payload, {
                apiKeyValidator,
                onError: (e) => {
                    this.context.stdout.write((0, renderer_1.renderFailedUpload)(dSYM, e.message));
                    metricsLogger.logger.increment('failed', 1);
                },
                onRetry: (e, attempts) => {
                    this.context.stdout.write((0, renderer_1.renderRetriedUpload)(dSYM, e.message, attempts));
                    metricsLogger.logger.increment('retries', 1);
                },
                onUpload: () => {
                    this.context.stdout.write((0, renderer_1.renderUpload)(dSYM));
                },
                retries: 5,
            });
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.paths = [['dsyms', 'upload']];
UploadCommand.usage = clipanion_1.Command.Usage({
    category: 'RUM',
    description: 'Upload dSYM files to Datadog.',
    details: `
      This command will upload all dSYM files to Datadog in order to symbolicate crash reports received by Datadog.\n
      See README for details.
    `,
    examples: [
        ['Upload all dSYM files in Derived Data path', 'datadog-ci dsyms upload ~/Library/Developer/Xcode/DerivedData'],
        [
            'Upload all dSYM files in a zip file (this is usually the case if your app has Bitcode enabled)',
            'datadog-ci dsyms upload /path/to/folder/my_file.zip',
        ],
    ],
});
//# sourceMappingURL=upload.js.map