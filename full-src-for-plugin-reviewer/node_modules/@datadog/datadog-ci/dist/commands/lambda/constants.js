"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentFrameworks = exports.SKIP_MASKING_LAMBDA_ENV_VARS = exports.DATADOG_APP_KEY_REG_EXP = exports.DATADOG_API_KEY_REG_EXP = exports.AWS_SECRET_ARN_REG_EXP = exports.AWS_SECRET_ACCESS_KEY_REG_EXP = exports.AWS_ACCESS_KEY_ID_REG_EXP = exports.EXTRA_TAGS_REG_EXP = exports.AWS_SHARED_CREDENTIALS_FILE_ENV_VAR = exports.AWS_SESSION_TOKEN_ENV_VAR = exports.AWS_DEFAULT_REGION_ENV_VAR = exports.AWS_SECRET_ACCESS_KEY_ENV_VAR = exports.AWS_ACCESS_KEY_ID_ENV_VAR = exports.CI_KMS_API_KEY_ENV_VAR = exports.CI_API_KEY_SECRET_ARN_ENV_VAR = exports.DOTNET_TRACER_HOME_ENV_VAR = exports.PROFILER_PATH_ENV_VAR = exports.PROFILER_ENV_VAR = exports.ENABLE_PROFILING_ENV_VAR = exports.APPSEC_ENABLED_ENV_VAR = exports.APM_FLUSH_DEADLINE_MILLISECONDS_ENV_VAR = exports.CAPTURE_LAMBDA_PAYLOAD_ENV_VAR = exports.EXTRA_TAGS_ENV_VAR = exports.LAMBDA_HANDLER_ENV_VAR = exports.LOG_LEVEL_ENV_VAR = exports.FLUSH_TO_LOG_ENV_VAR = exports.MERGE_XRAY_TRACES_ENV_VAR = exports.TRACE_ENABLED_ENV_VAR = exports.KMS_API_KEY_ENV_VAR = exports.API_KEY_SECRET_ARN_ENV_VAR = exports.DD_DOTNET_TRACER_HOME = exports.CORECLR_PROFILER_PATH = exports.CORECLR_PROFILER = exports.CORECLR_ENABLE_PROFILING = exports.AWS_LAMBDA_EXEC_WRAPPER = exports.AWS_LAMBDA_EXEC_WRAPPER_VAR = exports.TAG_VERSION_NAME = exports.SUBSCRIPTION_FILTER_NAME = exports.GOVCLOUD_LAYER_AWS_ACCOUNT = exports.DEFAULT_LAYER_AWS_ACCOUNT = exports.NODE_HANDLER_LOCATION = exports.PYTHON_HANDLER_LOCATION = exports.ARM_LAYER_SUFFIX = exports.ARM64_ARCHITECTURE = exports.ARM_LAYERS = exports.RUNTIME_LOOKUP = exports.RuntimeType = exports.LAYER_LOOKUP = exports.EXTENSION_LAYER_KEY = exports.DD_LAMBDA_EXTENSION_LAYER_NAME = void 0;
exports.EXPONENTIAL_BACKOFF_RETRY_STRATEGY = exports.LAMBDA_PROJECT_FILES = exports.FRAMEWORK_FILES_MAPPING = void 0;
const util_retry_1 = require("@smithy/util-retry");
const constants_1 = require("../../constants");
exports.DD_LAMBDA_EXTENSION_LAYER_NAME = 'Datadog-Extension';
exports.EXTENSION_LAYER_KEY = 'extension';
exports.LAYER_LOOKUP = {
    [exports.EXTENSION_LAYER_KEY]: exports.DD_LAMBDA_EXTENSION_LAYER_NAME,
    dotnet6: 'dd-trace-dotnet',
    dotnet8: 'dd-trace-dotnet',
    java11: 'dd-trace-java',
    java17: 'dd-trace-java',
    java21: 'dd-trace-java',
    'java8.al2': 'dd-trace-java',
    'nodejs16.x': 'Datadog-Node16-x',
    'nodejs18.x': 'Datadog-Node18-x',
    'nodejs20.x': 'Datadog-Node20-x',
    'python3.8': 'Datadog-Python38',
    'python3.9': 'Datadog-Python39',
    'python3.10': 'Datadog-Python310',
    'python3.11': 'Datadog-Python311',
    'python3.12': 'Datadog-Python312',
    'ruby3.2': 'Datadog-Ruby3-2',
};
var RuntimeType;
(function (RuntimeType) {
    RuntimeType[RuntimeType["DOTNET"] = 0] = "DOTNET";
    RuntimeType[RuntimeType["CUSTOM"] = 1] = "CUSTOM";
    RuntimeType[RuntimeType["JAVA"] = 2] = "JAVA";
    RuntimeType[RuntimeType["NODE"] = 3] = "NODE";
    RuntimeType[RuntimeType["PYTHON"] = 4] = "PYTHON";
    RuntimeType[RuntimeType["RUBY"] = 5] = "RUBY";
})(RuntimeType || (exports.RuntimeType = RuntimeType = {}));
// Lookup table for runtimes that are currently supported by the CLI
exports.RUNTIME_LOOKUP = {
    dotnet6: RuntimeType.DOTNET,
    dotnet8: RuntimeType.DOTNET,
    java11: RuntimeType.JAVA,
    java17: RuntimeType.JAVA,
    java21: RuntimeType.JAVA,
    'java8.al2': RuntimeType.JAVA,
    'nodejs16.x': RuntimeType.NODE,
    'nodejs18.x': RuntimeType.NODE,
    'nodejs20.x': RuntimeType.NODE,
    'provided.al2': RuntimeType.CUSTOM,
    'python3.8': RuntimeType.PYTHON,
    'python3.9': RuntimeType.PYTHON,
    'python3.10': RuntimeType.PYTHON,
    'python3.11': RuntimeType.PYTHON,
    'python3.12': RuntimeType.PYTHON,
    'ruby3.2': RuntimeType.RUBY,
};
exports.ARM_LAYERS = [
    exports.EXTENSION_LAYER_KEY,
    'dotnet6',
    'dotnet8',
    'python3.8',
    'python3.9',
    'python3.10',
    'python3.11',
    'python3.12',
    'ruby3.2',
];
exports.ARM64_ARCHITECTURE = 'arm64';
exports.ARM_LAYER_SUFFIX = '-ARM';
exports.PYTHON_HANDLER_LOCATION = 'datadog_lambda.handler.handler';
exports.NODE_HANDLER_LOCATION = '/opt/nodejs/node_modules/datadog-lambda-js/handler.handler';
exports.DEFAULT_LAYER_AWS_ACCOUNT = '464622532012';
exports.GOVCLOUD_LAYER_AWS_ACCOUNT = '002406178527';
exports.SUBSCRIPTION_FILTER_NAME = 'datadog-ci-filter';
exports.TAG_VERSION_NAME = 'dd_sls_ci';
// Env variables for Univeral instrument lambda exec wrapper
exports.AWS_LAMBDA_EXEC_WRAPPER_VAR = 'AWS_LAMBDA_EXEC_WRAPPER';
exports.AWS_LAMBDA_EXEC_WRAPPER = '/opt/datadog_wrapper';
// Export const values for .NET tracer
exports.CORECLR_ENABLE_PROFILING = '1';
exports.CORECLR_PROFILER = '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}';
exports.CORECLR_PROFILER_PATH = '/opt/datadog/Datadog.Trace.ClrProfiler.Native.so';
exports.DD_DOTNET_TRACER_HOME = '/opt/datadog';
// Environment variables used in the Lambda environment
exports.API_KEY_SECRET_ARN_ENV_VAR = 'DD_API_KEY_SECRET_ARN';
exports.KMS_API_KEY_ENV_VAR = 'DD_KMS_API_KEY';
exports.TRACE_ENABLED_ENV_VAR = 'DD_TRACE_ENABLED';
exports.MERGE_XRAY_TRACES_ENV_VAR = 'DD_MERGE_XRAY_TRACES';
exports.FLUSH_TO_LOG_ENV_VAR = 'DD_FLUSH_TO_LOG';
exports.LOG_LEVEL_ENV_VAR = 'DD_LOG_LEVEL';
exports.LAMBDA_HANDLER_ENV_VAR = 'DD_LAMBDA_HANDLER';
exports.EXTRA_TAGS_ENV_VAR = 'DD_TAGS';
exports.CAPTURE_LAMBDA_PAYLOAD_ENV_VAR = 'DD_CAPTURE_LAMBDA_PAYLOAD';
exports.APM_FLUSH_DEADLINE_MILLISECONDS_ENV_VAR = 'DD_APM_FLUSH_DEADLINE_MILLISECONDS';
exports.APPSEC_ENABLED_ENV_VAR = 'DD_SERVERLESS_APPSEC_ENABLED';
exports.ENABLE_PROFILING_ENV_VAR = 'CORECLR_ENABLE_PROFILING';
exports.PROFILER_ENV_VAR = 'CORECLR_PROFILER';
exports.PROFILER_PATH_ENV_VAR = 'CORECLR_PROFILER_PATH';
exports.DOTNET_TRACER_HOME_ENV_VAR = 'DD_DOTNET_TRACER_HOME';
// Environment variables used by Datadog CI
exports.CI_API_KEY_SECRET_ARN_ENV_VAR = 'DATADOG_API_KEY_SECRET_ARN';
exports.CI_KMS_API_KEY_ENV_VAR = 'DATADOG_KMS_API_KEY';
exports.AWS_ACCESS_KEY_ID_ENV_VAR = 'AWS_ACCESS_KEY_ID';
exports.AWS_SECRET_ACCESS_KEY_ENV_VAR = 'AWS_SECRET_ACCESS_KEY';
exports.AWS_DEFAULT_REGION_ENV_VAR = 'AWS_DEFAULT_REGION';
exports.AWS_SESSION_TOKEN_ENV_VAR = 'AWS_SESSION_TOKEN';
exports.AWS_SHARED_CREDENTIALS_FILE_ENV_VAR = 'AWS_SHARED_CREDENTIALS_FILE';
// DD_TAGS Regular Expression
// This RegExp ensures that the --extra-tags string
// matches a list of <key>:<value> separated by commas
// such as: layer:api,team:intake
exports.EXTRA_TAGS_REG_EXP = /^(([a-zA-Z]+)[\w\-/\.]*:[^,]+)+((\,)([a-zA-Z]+)[\w\-/\.]*:[^,]+)*$/g;
exports.AWS_ACCESS_KEY_ID_REG_EXP = /(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9])/g;
exports.AWS_SECRET_ACCESS_KEY_REG_EXP = /(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])/g;
exports.AWS_SECRET_ARN_REG_EXP = /arn:aws:secretsmanager:[\w-]+:\d{12}:secret:.+/;
exports.DATADOG_API_KEY_REG_EXP = /(?<![a-f0-9])[a-f0-9]{32}(?![a-f0-9])/g;
exports.DATADOG_APP_KEY_REG_EXP = /(?<![a-f0-9])[a-f0-9]{40}(?![a-f0-9])/g;
// Environment Variables whose values don't need to be masked
exports.SKIP_MASKING_LAMBDA_ENV_VARS = new Set([
    exports.AWS_LAMBDA_EXEC_WRAPPER_VAR,
    exports.API_KEY_SECRET_ARN_ENV_VAR,
    exports.DOTNET_TRACER_HOME_ENV_VAR,
    constants_1.ENVIRONMENT_ENV_VAR,
    exports.EXTRA_TAGS_ENV_VAR,
    exports.LAMBDA_HANDLER_ENV_VAR,
    exports.LOG_LEVEL_ENV_VAR,
    exports.KMS_API_KEY_ENV_VAR,
    exports.PROFILER_ENV_VAR,
    exports.PROFILER_PATH_ENV_VAR,
    constants_1.SERVICE_ENV_VAR,
    constants_1.SITE_ENV_VAR,
    constants_1.VERSION_ENV_VAR,
]);
var DeploymentFrameworks;
(function (DeploymentFrameworks) {
    DeploymentFrameworks["ServerlessFramework"] = "Serverless Framework";
    DeploymentFrameworks["AwsCdk"] = "AWS CDK";
    DeploymentFrameworks["AwsCloudFormation"] = "AWS CloudFormation";
    DeploymentFrameworks["Unknown"] = "Unknown";
})(DeploymentFrameworks || (exports.DeploymentFrameworks = DeploymentFrameworks = {}));
// Mappings of files to frameworks.
// For example, if `serverless.yml` exists, we know it's the Serverless Framework
exports.FRAMEWORK_FILES_MAPPING = new Map([
    ['serverless.yaml', DeploymentFrameworks.ServerlessFramework],
    ['serverless.yml', DeploymentFrameworks.ServerlessFramework],
    ['serverless.js', DeploymentFrameworks.ServerlessFramework],
    ['cdk.json', DeploymentFrameworks.AwsCdk],
    ['.cdk.json', DeploymentFrameworks.AwsCdk],
    ['template.yaml', DeploymentFrameworks.AwsCloudFormation],
    ['template.yml', DeploymentFrameworks.AwsCloudFormation],
    ['template.json', DeploymentFrameworks.AwsCloudFormation],
]);
exports.LAMBDA_PROJECT_FILES = [...constants_1.FLARE_PROJECT_FILES, ...exports.FRAMEWORK_FILES_MAPPING.keys()];
// Configures max number of attempts and exponential backoff function for AWS requests
// First retry is attempt 1
exports.EXPONENTIAL_BACKOFF_RETRY_STRATEGY = new util_retry_1.ConfiguredRetryStrategy(4, (attempt) => 1000 * Math.pow(2, (attempt - 1)));
//# sourceMappingURL=constants.js.map