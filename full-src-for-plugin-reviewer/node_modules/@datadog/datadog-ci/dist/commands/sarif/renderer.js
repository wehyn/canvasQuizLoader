"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderFilesNotFound = exports.renderCommandInfo = exports.renderUpload = exports.renderDryRunUpload = exports.renderSuccessfulCommand = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderMissingTags = exports.renderInvalidFile = void 0;
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../junit/utils");
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
    INFO: 'ℹ️',
};
const renderInvalidFile = (sarifReport, errorMessages) => {
    let fullStr = '';
    const reportPath = `[${chalk_1.default.bold.dim(sarifReport)}]`;
    fullStr += chalk_1.default.red(`${ICONS.FAILED} Invalid SARIF report file ${reportPath}.\n`);
    fullStr += chalk_1.default.red(`The report is not a valid JSON or is not compliant with the SARIF json schema v2.1.0.\n`);
    fullStr += chalk_1.default.red(`Error(s) found:\n`);
    for (const errorMessage of errorMessages) {
        fullStr += chalk_1.default.red(` - ${errorMessage}\n`);
    }
    return fullStr;
};
exports.renderInvalidFile = renderInvalidFile;
const renderMissingTags = (missingTags) => {
    const styledPath = `[${chalk_1.default.bold.dim(process.cwd())}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`There are missing git tags in ${styledPath}:\n`);
    missingTags.forEach((tag) => {
        fullStr += chalk_1.default.red(` - ${tag}\n`);
    });
    fullStr += chalk_1.default.red(`To fix this, ensure that the git information above is available for your commit.\n`);
    return fullStr;
};
exports.renderMissingTags = renderMissingTags;
const renderFailedUpload = (sarifReport, error) => {
    var _a;
    const reportPath = `[${chalk_1.default.bold.dim(sarifReport.reportPath)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.FAILED} Failed upload SARIF report file ${reportPath}: ${error.message}\n`);
    if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) {
        fullStr += chalk_1.default.red(`API status code: ${error.response.status}\n`);
    }
    return fullStr;
};
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (sarifReport, errorMessage, attempt) => {
    const sarifReportPath = `[${chalk_1.default.bold.dim(sarifReport.reportPath)}]`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying SARIF report upload ${sarifReportPath}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulCommand = (fileCount, duration) => {
    let fullStr = '';
    fullStr += chalk_1.default.green(`${ICONS.SUCCESS} Uploaded ${fileCount} files in ${duration} seconds.\n`);
    fullStr += chalk_1.default.green(`${ICONS.INFO}  Results available on ${(0, utils_1.getBaseUrl)()}ci/code-analysis\n`);
    fullStr += chalk_1.default.green('=================================================================================================\n');
    return fullStr;
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderDryRunUpload = (payload) => `[DRYRUN] ${(0, exports.renderUpload)(payload)}`;
exports.renderDryRunUpload = renderDryRunUpload;
const renderUpload = (payload) => `Uploading SARIF report in ${payload.reportPath}\n`;
exports.renderUpload = renderUpload;
const renderCommandInfo = (basePaths, service, env, sha, concurrency, dryRun, noVerify) => {
    let fullStr = '';
    if (dryRun) {
        fullStr += chalk_1.default.yellow(`${ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD SARIF REPORT\n`);
    }
    if (noVerify) {
        fullStr += chalk_1.default.yellow(`${ICONS.INFO} --no-verify enabled. The reports will be uploaded without client validation.\n`);
    }
    fullStr += chalk_1.default.green(`Starting upload with concurrency ${concurrency}. \n`);
    if (basePaths.length === 1 && !!path_1.default.extname(basePaths[0])) {
        fullStr += chalk_1.default.green(`Will upload SARIF report file ${basePaths[0]}\n`);
    }
    else {
        fullStr += chalk_1.default.green(`Will look for SARIF report files in ${basePaths.join(', ')}\n`);
    }
    fullStr += `Only one upload per commit, env, service and tool\n`;
    fullStr += `Preparing upload for sha:${sha} env:${env} service:${service}\n`;
    return fullStr;
};
exports.renderCommandInfo = renderCommandInfo;
const renderFilesNotFound = (basePaths, service) => {
    let fullStr = '';
    const paths = basePaths.length === 1 && !!path_1.default.extname(basePaths[0]) ? basePaths[0] : basePaths.join(', ');
    fullStr += chalk_1.default.yellow(`${ICONS.WARNING} Cannot find valid SARIF report files to upload in ${paths} for service ${service}.\n`);
    fullStr += chalk_1.default.yellow(`Check the files exist and are valid.\n`);
    return fullStr;
};
exports.renderFilesNotFound = renderFilesNotFound;
//# sourceMappingURL=renderer.js.map