"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunTestsCommand = exports.DEFAULT_COMMAND_CONFIG = exports.DEFAULT_TEST_CONFIG_FILES_GLOB = exports.DEFAULT_POLLING_TIMEOUT = exports.DEFAULT_BATCH_TIMEOUT = exports.MAX_TESTS_TO_TRIGGER = void 0;
const clipanion_1 = require("clipanion");
const deep_extend_1 = __importDefault(require("deep-extend"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const utils_1 = require("../../helpers/utils");
const validation = __importStar(require("../../helpers/validation"));
const validation_1 = require("../../helpers/validation");
const compatibility_1 = require("./compatibility");
const errors_1 = require("./errors");
const default_1 = require("./reporters/default");
const junit_1 = require("./reporters/junit");
const run_tests_lib_1 = require("./run-tests-lib");
const internal_1 = require("./utils/internal");
const public_1 = require("./utils/public");
exports.MAX_TESTS_TO_TRIGGER = 1000;
exports.DEFAULT_BATCH_TIMEOUT = 30 * 60 * 1000;
/** @deprecated Please use `DEFAULT_BATCH_TIMEOUT` instead. */
exports.DEFAULT_POLLING_TIMEOUT = exports.DEFAULT_BATCH_TIMEOUT;
exports.DEFAULT_TEST_CONFIG_FILES_GLOB = '{,!(node_modules)/**/}*.synthetics.json';
exports.DEFAULT_COMMAND_CONFIG = {
    apiKey: '',
    appKey: '',
    batchTimeout: exports.DEFAULT_BATCH_TIMEOUT,
    configPath: 'datadog-ci.json',
    datadogSite: 'datadoghq.com',
    defaultTestOverrides: {},
    failOnCriticalErrors: false,
    failOnMissingTests: false,
    failOnTimeout: true,
    files: [],
    // TODO SYNTH-12989: Clean up deprecated `global` in favor of `defaultTestOverrides`
    global: {},
    jUnitReport: '',
    // TODO SYNTH-12989: Clean up `locations` that should only be part of test overrides
    locations: [],
    // TODO SYNTH-12989: Clean up deprecated `pollingTimeout` in favor of `batchTimeout`
    pollingTimeout: exports.DEFAULT_POLLING_TIMEOUT,
    proxy: { protocol: 'http' },
    publicIds: [],
    subdomain: 'app',
    testSearchQuery: '',
    tunnel: false,
    // TODO SYNTH-12989: Clean up deprecated `variableStrings` in favor of `variables` in `defaultTestOverrides`.
    variableStrings: [],
};
const configurationLink = 'https://docs.datadoghq.com/continuous_testing/cicd_integrations/configuration';
const $1 = (text) => (0, terminal_link_1.default)(text, `${configurationLink}#global-configuration-file-options`);
const $2 = (text) => (0, terminal_link_1.default)(text, `${configurationLink}#test-files`);
const $3 = (text) => (0, terminal_link_1.default)(text, `${configurationLink}#use-the-testing-tunnel`);
class RunTestsCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.configPath = clipanion_1.Option.String('--config', { description: `Pass a path to a ${$1('global configuration file')}.` });
        this.jUnitReport = clipanion_1.Option.String('-j,--jUnitReport', { description: 'Pass a path to a JUnit report file.' });
        // TODO SYNTH-12989: Clean up deprecated `--runName`
        /** @deprecated This CLI parameter is deprecated */
        this.runName = clipanion_1.Option.String('-n,--runName', {
            description: 'A name for this run, which will be included in the JUnit report file.',
        });
        this.apiKey = clipanion_1.Option.String('--apiKey', { description: 'The API key used to query the Datadog API.' });
        this.appKey = clipanion_1.Option.String('--appKey', { description: 'The application key used to query the Datadog API.' });
        this.batchTimeout = clipanion_1.Option.String('--batchTimeout', {
            description: 'The duration (in milliseconds) after which `datadog-ci` stops waiting for test results. The default is 30 minutes. At the CI level, test results completed after this duration are considered failed.',
            validator: validation.isInteger(),
        });
        this.datadogSite = clipanion_1.Option.String('--datadogSite', { description: 'The Datadog instance to which request is sent.' });
        // TODO SYNTH-12989: Clean up deprecated `--deviceIds` in favor of `--override deviceIds="dev1;dev2;..."`
        /** @deprecated This CLI parameter is deprecated, please use `--override deviceIds="dev1;dev2;..."` instead. */
        this.deviceIds = clipanion_1.Option.Array('--deviceIds', {
            description: '**DEPRECATED** Override the mobile device(s) to run your mobile test. Please use `--override deviceIds="dev1;dev2;..."` instead.',
        });
        this.failOnCriticalErrors = clipanion_1.Option.Boolean('--failOnCriticalErrors', {
            description: 'A boolean flag that fails the CI job if no tests were triggered, or results could not be fetched from Datadog.',
        });
        this.failOnMissingTests = clipanion_1.Option.Boolean('--failOnMissingTests', {
            description: `A boolean flag that fails the CI job if at least one specified test with a public ID (a \`--public-id\` CLI argument or listed in a ${$2('test file')} is missing in a run (for example, if it has been deleted programmatically or on the Datadog site).`,
        });
        this.failOnTimeout = clipanion_1.Option.Boolean('--failOnTimeout', {
            description: 'A boolean flag that fails the CI job if at least one test exceeds the default test timeout.',
        });
        this.files = clipanion_1.Option.Array('-f,--files', {
            description: `Glob pattern to detect Synthetic test ${$2('configuration files')}}.`,
        });
        this.mobileApplicationVersion = clipanion_1.Option.String('--mobileApplicationVersion', {
            description: 'Override the default mobile application version to test a different version within Datadog.',
        });
        this.mobileApplicationVersionFilePath = clipanion_1.Option.String('--mobileApp,--mobileApplicationVersionFilePath', {
            description: 'Override the application version for all Synthetic mobile application tests.',
        });
        this.overrides = clipanion_1.Option.Array('--override', {
            description: 'Override specific test properties.',
        });
        // TODO SYNTH-12989: Clean up deprecated `--pollingTimeout` in favor of `--batchTimeout`
        /** @deprecated This CLI parameter is deprecated, please use `--batchTimeout` instead. */
        this.pollingTimeout = clipanion_1.Option.String('--pollingTimeout', {
            description: '**DEPRECATED** The duration (in milliseconds) after which `datadog-ci` stops polling for test results. Please use `--batchTimeout` instead.',
            validator: validation.isInteger(),
        });
        this.publicIds = clipanion_1.Option.Array('-p,--public-id', { description: 'Specify a test to run.' });
        this.selectiveRerun = clipanion_1.Option.Boolean('--selectiveRerun', {
            description: 'A boolean flag to only run the tests which failed in the previous test batches. Use `--no-selectiveRerun` to force a full run if your configuration enables it by default.',
        });
        this.subdomain = clipanion_1.Option.String('--subdomain', {
            description: 'The name of the custom subdomain set to access your Datadog application. If the URL used to access Datadog is `myorg.datadoghq.com`, the `subdomain` value needs to be set to `myorg`.',
        });
        this.testSearchQuery = clipanion_1.Option.String('-s,--search', {
            description: 'Pass a query to select which Synthetic tests to run.',
        });
        this.tunnel = clipanion_1.Option.Boolean('-t,--tunnel', {
            description: `Use the ${$3('Continuous Testing Tunnel')} to execute your test batch.`,
        });
        // TODO SYNTH-12989: Clean up deprecated `variableStrings` in favor of `variables` in `defaultTestOverrides`.
        /** @deprecated This CLI parameter is deprecated, please use `--override variables.NAME=VALUE` instead. */
        this.variableStrings = clipanion_1.Option.Array('-v,--variable', {
            description: '**DEPRECATED** Pass a variable override. Please use `--override variables.NAME=VALUE` instead.',
        });
        this.config = JSON.parse(JSON.stringify(exports.DEFAULT_COMMAND_CONFIG)); // Deep copy to avoid mutation
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            const reporters = [new default_1.DefaultReporter(this)];
            this.reporter = (0, public_1.getReporter)(reporters);
            try {
                yield this.resolveConfig();
            }
            catch (error) {
                if (error instanceof errors_1.CiError) {
                    (0, public_1.reportCiError)(error, this.reporter);
                }
                return 1;
            }
            if (this.config.jUnitReport) {
                reporters.push(new junit_1.JUnitReporter({
                    context: this.context,
                    jUnitReport: this.config.jUnitReport,
                    runName: this.runName,
                }));
            }
            const startTime = Date.now();
            if (this.config.tunnel) {
                this.reporter.log('You are using tunnel option, the chosen location(s) will be overridden by a location in your account region.\n');
            }
            let results;
            let summary;
            try {
                ;
                ({ results, summary } = yield (0, run_tests_lib_1.executeTests)(this.reporter, this.config));
            }
            catch (error) {
                (0, public_1.reportExitLogs)(this.reporter, this.config, { error });
                return (0, public_1.toExitCode)((0, public_1.getExitReason)(this.config, { error }));
            }
            const orgSettings = yield (0, public_1.getOrgSettings)(this.reporter, this.config);
            (0, public_1.renderResults)({
                config: this.config,
                orgSettings,
                reporter: this.reporter,
                results,
                startTime,
                summary,
            });
            (0, public_1.reportExitLogs)(this.reporter, this.config, { results });
            return (0, public_1.toExitCode)((0, public_1.getExitReason)(this.config, { results }));
        });
    }
    resolveConfig() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
        return __awaiter(this, void 0, void 0, function* () {
            // Defaults < file < ENV < CLI
            // Override with config file variables (e.g. datadog-ci.json)
            try {
                // Override Config Path with ENV variables
                const overrideConfigPath = (_b = (_a = this.configPath) !== null && _a !== void 0 ? _a : process.env.DATADOG_SYNTHETICS_CONFIG_PATH) !== null && _b !== void 0 ? _b : 'datadog-ci.json';
                this.config = yield (0, utils_1.resolveConfigFromFile)(this.config, {
                    configPath: overrideConfigPath,
                    defaultConfigPaths: [this.config.configPath],
                });
            }
            catch (error) {
                if (this.configPath) {
                    throw error;
                }
            }
            // Convert cookies to object
            if (typeof ((_c = this.config.defaultTestOverrides) === null || _c === void 0 ? void 0 : _c.cookies) === 'string') {
                this.config.defaultTestOverrides.cookies = { value: this.config.defaultTestOverrides.cookies };
            }
            // Convert setCookies to object
            if (typeof ((_d = this.config.defaultTestOverrides) === null || _d === void 0 ? void 0 : _d.setCookies) === 'string') {
                this.config.defaultTestOverrides.setCookies = { value: this.config.defaultTestOverrides.setCookies };
            }
            // TODO SYNTH-12989: Clean up deprecated `global` in favor of `defaultTestOverrides`
            this.config = (0, compatibility_1.replaceGlobalWithDefaultTestOverrides)(this.config, this.reporter);
            // TODO SYNTH-12989: Clean up `locations` that should only be part of test overrides
            this.config = (0, compatibility_1.moveLocationsToTestOverrides)(this.config, this.reporter);
            // Override with ENV variables
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.removeUndefinedValues)({
                apiKey: process.env.DATADOG_API_KEY,
                appKey: process.env.DATADOG_APP_KEY,
                batchTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_BATCH_TIMEOUT),
                configPath: process.env.DATADOG_SYNTHETICS_CONFIG_PATH,
                datadogSite: process.env.DATADOG_SITE,
                failOnCriticalErrors: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_CRITICAL_ERRORS),
                failOnMissingTests: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_MISSING_TESTS),
                failOnTimeout: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_TIMEOUT),
                files: (_e = process.env.DATADOG_SYNTHETICS_FILES) === null || _e === void 0 ? void 0 : _e.split(';'),
                jUnitReport: process.env.DATADOG_SYNTHETICS_JUNIT_REPORT,
                publicIds: (_f = process.env.DATADOG_SYNTHETICS_PUBLIC_IDS) === null || _f === void 0 ? void 0 : _f.split(';'),
                selectiveRerun: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_SELECTIVE_RERUN),
                subdomain: process.env.DATADOG_SUBDOMAIN,
                testSearchQuery: process.env.DATADOG_SYNTHETICS_TEST_SEARCH_QUERY,
                tunnel: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_TUNNEL),
            }));
            // Override with OVERRIDE ENV variables
            const envOverrideBasicAuth = (0, deep_extend_1.default)((_h = (_g = this.config.defaultTestOverrides) === null || _g === void 0 ? void 0 : _g.basicAuth) !== null && _h !== void 0 ? _h : {}, (0, utils_1.removeUndefinedValues)({
                password: process.env.DATADOG_SYNTHETICS_OVERRIDE_BASIC_AUTH_PASSWORD,
                username: process.env.DATADOG_SYNTHETICS_OVERRIDE_BASIC_AUTH_USERNAME,
            }));
            const envOverrideCookies = (0, utils_1.removeUndefinedValues)({
                append: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_COOKIES_APPEND),
                value: process.env.DATADOG_SYNTHETICS_OVERRIDE_COOKIES,
            });
            const envOverrideSetCookies = (0, utils_1.removeUndefinedValues)({
                append: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_SET_COOKIES_APPEND),
                value: process.env.DATADOG_SYNTHETICS_OVERRIDE_SET_COOKIES,
            });
            const envOverrideRetryConfig = (0, deep_extend_1.default)((_k = (_j = this.config.defaultTestOverrides) === null || _j === void 0 ? void 0 : _j.retry) !== null && _k !== void 0 ? _k : {}, (0, utils_1.removeUndefinedValues)({
                count: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_RETRY_COUNT),
                interval: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_RETRY_INTERVAL),
            }));
            this.config.defaultTestOverrides = (0, deep_extend_1.default)(this.config.defaultTestOverrides, (0, utils_1.removeUndefinedValues)({
                allowInsecureCertificates: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_ALLOW_INSECURE_CERTIFICATES),
                basicAuth: Object.keys(envOverrideBasicAuth).length > 0 ? envOverrideBasicAuth : undefined,
                body: process.env.DATADOG_SYNTHETICS_OVERRIDE_BODY,
                bodyType: process.env.DATADOG_SYNTHETICS_OVERRIDE_BODY_TYPE,
                cookies: Object.keys(envOverrideCookies).length > 0 ? envOverrideCookies : undefined,
                setCookies: Object.keys(envOverrideSetCookies).length > 0 ? envOverrideSetCookies : undefined,
                defaultStepTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_DEFAULT_STEP_TIMEOUT),
                deviceIds: (_l = process.env.DATADOG_SYNTHETICS_OVERRIDE_DEVICE_IDS) === null || _l === void 0 ? void 0 : _l.split(';'),
                executionRule: (0, internal_1.toExecutionRule)(process.env.DATADOG_SYNTHETICS_OVERRIDE_EXECUTION_RULE),
                followRedirects: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_FOLLOW_REDIRECTS),
                // TODO SYNTH-12989: Clean up `locations` that should only be part of test overrides
                locations: (_o = (_m = process.env.DATADOG_SYNTHETICS_OVERRIDE_LOCATIONS) === null || _m === void 0 ? void 0 : _m.split(';')) !== null && _o !== void 0 ? _o : (_p = process.env.DATADOG_SYNTHETICS_LOCATIONS) === null || _p === void 0 ? void 0 : _p.split(';'),
                mobileApplicationVersion: process.env.DATADOG_SYNTHETICS_OVERRIDE_MOBILE_APPLICATION_VERSION,
                resourceUrlSubstitutionRegexes: (_q = process.env.DATADOG_SYNTHETICS_OVERRIDE_RESOURCE_URL_SUBSTITUTION_REGEXES) === null || _q === void 0 ? void 0 : _q.split(';'),
                retry: Object.keys(envOverrideRetryConfig).length > 0 ? envOverrideRetryConfig : undefined,
                startUrl: process.env.DATADOG_SYNTHETICS_OVERRIDE_START_URL,
                startUrlSubstitutionRegex: process.env.DATADOG_SYNTHETICS_OVERRIDE_START_URL_SUBSTITUTION_REGEX,
                testTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_TEST_TIMEOUT),
            }));
            // We do not want to extend headers and variables, but rather override them completely
            if (process.env.DATADOG_SYNTHETICS_OVERRIDE_HEADERS) {
                this.config.defaultTestOverrides.headers = (0, env_1.toStringMap)(process.env.DATADOG_SYNTHETICS_OVERRIDE_HEADERS);
            }
            if (process.env.DATADOG_SYNTHETICS_OVERRIDE_VARIABLES) {
                this.config.defaultTestOverrides.variables = (0, env_1.toStringMap)(process.env.DATADOG_SYNTHETICS_OVERRIDE_VARIABLES);
            }
            // Override with CLI parameters
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.removeUndefinedValues)({
                apiKey: this.apiKey,
                appKey: this.appKey,
                batchTimeout: this.batchTimeout,
                configPath: this.configPath,
                datadogSite: this.datadogSite,
                failOnCriticalErrors: this.failOnCriticalErrors,
                failOnMissingTests: this.failOnMissingTests,
                failOnTimeout: this.failOnTimeout,
                files: this.files,
                jUnitReport: this.jUnitReport,
                publicIds: this.publicIds,
                selectiveRerun: this.selectiveRerun,
                subdomain: this.subdomain,
                testSearchQuery: this.testSearchQuery,
                tunnel: this.tunnel,
            }));
            // TODO SYNTH-12989: Clean up deprecated `pollingTimeout` in favor of `batchTimeout`
            this.config = (0, compatibility_1.replacePollingTimeoutWithBatchTimeout)(this.config, this.reporter, false, this.batchTimeout, this.pollingTimeout);
            // Override defaultTestOverrides with CLI parameters
            let validatedOverrides;
            try {
                validatedOverrides = (0, internal_1.validateAndParseOverrides)(this.overrides);
            }
            catch (error) {
                throw new errors_1.CiError('INVALID_CONFIG', error.message);
            }
            const cliOverrideBasicAuth = (0, deep_extend_1.default)((_s = (_r = this.config.defaultTestOverrides) === null || _r === void 0 ? void 0 : _r.basicAuth) !== null && _s !== void 0 ? _s : {}, (0, utils_1.removeUndefinedValues)({
                password: (_t = validatedOverrides.basicAuth) === null || _t === void 0 ? void 0 : _t.password,
                username: (_u = validatedOverrides.basicAuth) === null || _u === void 0 ? void 0 : _u.username,
            }));
            const cliOverrideCookies = (0, utils_1.removeUndefinedValues)({
                append: (_v = validatedOverrides.cookies) === null || _v === void 0 ? void 0 : _v.append,
                value: (_w = validatedOverrides.cookies) === null || _w === void 0 ? void 0 : _w.value,
            });
            const cliOverrideSetCookies = (0, utils_1.removeUndefinedValues)({
                append: (_x = validatedOverrides.setCookies) === null || _x === void 0 ? void 0 : _x.append,
                value: (_y = validatedOverrides.setCookies) === null || _y === void 0 ? void 0 : _y.value,
            });
            const cliOverrideRetryConfig = (0, deep_extend_1.default)((_0 = (_z = this.config.defaultTestOverrides) === null || _z === void 0 ? void 0 : _z.retry) !== null && _0 !== void 0 ? _0 : {}, (0, utils_1.removeUndefinedValues)({
                count: (_1 = validatedOverrides.retry) === null || _1 === void 0 ? void 0 : _1.count,
                interval: (_2 = validatedOverrides.retry) === null || _2 === void 0 ? void 0 : _2.interval,
            }));
            this.config.defaultTestOverrides = (0, deep_extend_1.default)(this.config.defaultTestOverrides, (0, utils_1.removeUndefinedValues)({
                allowInsecureCertificates: validatedOverrides.allowInsecureCertificates,
                basicAuth: Object.keys(cliOverrideBasicAuth).length > 0 ? cliOverrideBasicAuth : undefined,
                body: validatedOverrides.body,
                bodyType: validatedOverrides.bodyType,
                cookies: Object.keys(cliOverrideCookies).length > 0 ? cliOverrideCookies : undefined,
                setCookies: Object.keys(cliOverrideSetCookies).length > 0 ? cliOverrideSetCookies : undefined,
                defaultStepTimeout: validatedOverrides.defaultStepTimeout,
                // TODO SYNTH-12989: Clean up deprecated `--deviceIds` in favor of `--override deviceIds="dev1;dev2;..."`
                deviceIds: (_3 = validatedOverrides.deviceIds) !== null && _3 !== void 0 ? _3 : this.deviceIds,
                executionRule: validatedOverrides.executionRule,
                followRedirects: validatedOverrides.followRedirects,
                locations: validatedOverrides.locations,
                mobileApplicationVersion: this.mobileApplicationVersion,
                mobileApplicationVersionFilePath: this.mobileApplicationVersionFilePath,
                resourceUrlSubstitutionRegexes: validatedOverrides.resourceUrlSubstitutionRegexes,
                retry: Object.keys(cliOverrideRetryConfig).length > 0 ? cliOverrideRetryConfig : undefined,
                startUrl: validatedOverrides.startUrl,
                startUrlSubstitutionRegex: validatedOverrides.startUrlSubstitutionRegex,
                testTimeout: validatedOverrides.testTimeout,
            }));
            // We do not want to extend headers and variables, but rather override them completely
            // TODO SYNTH-12989: Clean up deprecated `variableStrings` in favor of `variables` in `defaultTestOverrides`.
            if (validatedOverrides.headers) {
                this.config.defaultTestOverrides.headers = validatedOverrides.headers;
            }
            if (validatedOverrides.variables || this.variableStrings) {
                this.config.defaultTestOverrides.variables =
                    (_4 = validatedOverrides.variables) !== null && _4 !== void 0 ? _4 : (0, public_1.parseVariablesFromCli)(this.variableStrings, (log) => this.reporter.log(log));
            }
            if (typeof this.config.files === 'string') {
                this.reporter.log('[DEPRECATED] "files" should be an array of string instead of a string.\n');
                this.config.files = [this.config.files];
            }
            if (!(0, validation_1.isValidDatadogSite)(this.config.datadogSite)) {
                throw new errors_1.CiError('INVALID_CONFIG', `The \`datadogSite\` config property (${JSON.stringify(this.config.datadogSite)}) must match one of the sites supported by Datadog.\nFor more information, see "Site parameter" in our documentation: https://docs.datadoghq.com/getting_started/site/#access-the-datadog-site`);
            }
            if (typeof ((_5 = this.config.defaultTestOverrides) === null || _5 === void 0 ? void 0 : _5.cookies) === 'object' &&
                !this.config.defaultTestOverrides.cookies.value) {
                throw new errors_1.CiError('INVALID_CONFIG', 'Cookies value cannot be empty.');
            }
            if (typeof ((_6 = this.config.defaultTestOverrides) === null || _6 === void 0 ? void 0 : _6.setCookies) === 'object' &&
                !this.config.defaultTestOverrides.setCookies.value) {
                throw new errors_1.CiError('INVALID_CONFIG', 'SetCookies value cannot be empty.');
            }
        });
    }
}
exports.RunTestsCommand = RunTestsCommand;
RunTestsCommand.paths = [['synthetics', 'run-tests']];
RunTestsCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Run Synthetic tests with Datadog.',
    details: `
      This command will run Synthetic tests with Datadog, wait for the results and report a summary.\n
      https://docs.datadoghq.com/continuous_testing/cicd_integrations
    `,
    examples: [
        [
            'Explicitly specify multiple tests to run',
            'datadog-ci synthetics run-tests --public-id pub-lic-id1 --public-id pub-lic-id2',
        ],
        ['Discover tests with a search query', "datadog-ci synthetics run-tests --search 'tag:e2e-tests'"],
        [
            'Override the default glob pattern to group the tests in suites',
            'datadog-ci synthetics run-tests -f ./component-1/**/*.synthetics.json -f ./component-2/**/*.synthetics.json',
        ],
        [
            'Pass variables as arguments',
            'datadog-ci synthetics run-tests -f ./component-1/**/*.synthetics.json --variable PASSWORD=$PASSWORD',
        ],
    ],
});
//# sourceMappingURL=run-tests-command.js.map