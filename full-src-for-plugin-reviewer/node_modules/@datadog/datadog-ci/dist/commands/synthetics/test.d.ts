/// <reference types="jest" />
import { APIHelper } from './api';
import { RemoteTriggerConfig, MainReporter, RunTestsCommandConfig, Suite, Test, TriggerConfig, LocalTestDefinition } from './interfaces';
export declare const getTestConfigs: (config: RunTestsCommandConfig, reporter: MainReporter, suites?: Suite[]) => Promise<TriggerConfig[]>;
export declare const getTestsFromSearchQuery: (api: APIHelper, config: Pick<RunTestsCommandConfig, 'defaultTestOverrides' | 'testSearchQuery'>) => Promise<RemoteTriggerConfig[] | []>;
export declare const getTest: (api: APIHelper, triggerConfig: TriggerConfig) => Promise<{
    test: Test;
} | {
    errorMessage: string;
}>;
export declare const normalizeLocalTestDefinition: (localTestDefinition: LocalTestDefinition) => {
    public_id: string | undefined;
    config: {
        assertions: import("./interfaces").Assertion[];
        request: {
            dnsServer?: string | undefined;
            headers: {
                [key: string]: string;
            };
            host?: string | undefined;
            method: string;
            port?: number | undefined;
            timeout: number;
            url: string;
        };
        steps?: {
            subtype: string;
        }[] | undefined;
        variables: string[];
    };
    locations: string[];
    message: string;
    name: string;
    options: {
        ci?: {
            executionRule: import("./interfaces").ExecutionRule;
        } | undefined;
        device_ids?: string[] | undefined;
        mobileApplication?: import("./interfaces").MobileApplication | undefined;
        retry?: {
            count?: number | undefined;
        } | undefined;
    };
    subtype: string;
    tags: string[];
    type: string;
};
