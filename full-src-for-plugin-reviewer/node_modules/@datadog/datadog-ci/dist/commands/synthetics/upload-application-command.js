"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadApplicationCommand = exports.DEFAULT_UPLOAD_COMMAND_CONFIG = void 0;
const clipanion_1 = require("clipanion");
const deep_extend_1 = __importDefault(require("deep-extend"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const logger_1 = require("../../helpers/logger");
const utils_1 = require("../../helpers/utils");
const api_1 = require("./api");
const errors_1 = require("./errors");
const mobile_1 = require("./mobile");
const app_upload_1 = require("./reporters/mobile/app-upload");
exports.DEFAULT_UPLOAD_COMMAND_CONFIG = {
    apiKey: '',
    appKey: '',
    configPath: 'datadog-ci.json',
    datadogSite: 'datadoghq.com',
    proxy: { protocol: 'http' },
    mobileApplicationVersionFilePath: '',
    mobileApplicationId: '',
    versionName: '',
    latest: false,
};
const configurationLink = 'https://docs.datadoghq.com/continuous_testing/cicd_integrations/configuration';
const $1 = (text) => (0, terminal_link_1.default)(text, `${configurationLink}#global-configuration-file-options`);
class UploadApplicationCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.apiKey = clipanion_1.Option.String('--apiKey', { description: 'The API key used to query the Datadog API.' });
        this.appKey = clipanion_1.Option.String('--appKey', { description: 'The application key used to query the Datadog API.' });
        this.configPath = clipanion_1.Option.String('--config', { description: `Pass a path to a ${$1('global configuration file')}.` });
        this.datadogSite = clipanion_1.Option.String('--datadogSite', { description: 'The Datadog instance to which request is sent.' });
        this.mobileApplicationVersionFilePath = clipanion_1.Option.String('--mobileApp,--mobileApplicationVersionFilePath', {
            description: 'Override the application version for all Synthetic mobile application tests.',
        });
        this.mobileApplicationId = clipanion_1.Option.String('--mobileApplicationId', {
            description: 'ID of the application you want to upload the new version to.',
        });
        this.versionName = clipanion_1.Option.String('--versionName', { description: 'Name of the new version. It has to be unique.' });
        this.latest = clipanion_1.Option.Boolean('--latest', {
            description: 'Marks the application as `latest`. Any tests that run on the latest version will use this version on their next run.',
        });
        this.config = JSON.parse(JSON.stringify(exports.DEFAULT_UPLOAD_COMMAND_CONFIG)); // Deep copy to avoid mutation
        this.logger = new logger_1.Logger((s) => {
            this.context.stdout.write(s);
        }, logger_1.LogLevel.INFO);
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            try {
                yield this.resolveConfig();
            }
            catch (error) {
                this.logger.error(`Error: invalid config`);
                return 1;
            }
            const appUploadReporter = new app_upload_1.AppUploadReporter(this.context);
            try {
                yield (0, mobile_1.uploadMobileApplicationVersion)(this.config, appUploadReporter);
            }
            catch (error) {
                if (error instanceof errors_1.CiError || error instanceof api_1.EndpointError || error instanceof errors_1.CriticalError) {
                    this.logger.error(`Error: ${error.message}`);
                }
                return 1;
            }
        });
    }
    resolveConfig() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // Defaults < file < ENV < CLI
            try {
                // Override Config Path with ENV variables
                const overrideConfigPath = (_b = (_a = this.configPath) !== null && _a !== void 0 ? _a : process.env.DATADOG_SYNTHETICS_CONFIG_PATH) !== null && _b !== void 0 ? _b : 'datadog-ci.json';
                this.config = yield (0, utils_1.resolveConfigFromFile)(this.config, {
                    configPath: overrideConfigPath,
                    defaultConfigPaths: [this.config.configPath],
                });
            }
            catch (error) {
                if (this.configPath) {
                    throw error;
                }
            }
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.removeUndefinedValues)({
                apiKey: process.env.DATADOG_API_KEY,
                appKey: process.env.DATADOG_APP_KEY,
                configPath: process.env.DATADOG_SYNTHETICS_CONFIG_PATH,
                datadogSite: process.env.DATADOG_SITE,
                mobileApplicationId: process.env.DATADOG_SYNTHETICS_MOBILE_APPLICATION_ID,
                versionName: process.env.DATADOG_SYNTHETICS_VERSION_NAME,
                latest: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_LATEST),
            }));
            // Override with CLI parameters
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.removeUndefinedValues)({
                apiKey: this.apiKey,
                appKey: this.appKey,
                configPath: this.configPath,
                datadogSite: this.datadogSite,
                mobileApplicationVersionFilePath: this.mobileApplicationVersionFilePath,
                mobileApplicationId: this.mobileApplicationId,
                versionName: this.versionName,
                latest: this.latest,
            }));
        });
    }
}
exports.UploadApplicationCommand = UploadApplicationCommand;
UploadApplicationCommand.paths = [['synthetics', 'upload-application']];
UploadApplicationCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Upload a new version to an existing mobile application in Datadog.',
    details: `
      This command will upload a \`.apk\` or \`.ipa\` file as a new version for a given application, which already exists in Datadog.\n
      https://docs.datadoghq.com/mobile_app_testing/mobile_app_tests
    `,
    examples: [
        [
            'Upload version `example 1.0` and mark it as latest',
            "datadog-ci synthetics upload-application --mobileApplicationId '123-123-123' --mobileApplicationVersionFilePath example/test.apk --versionName 'example 1.0' --latest",
        ],
    ],
});
//# sourceMappingURL=upload-application-command.js.map