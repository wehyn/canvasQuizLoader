"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArchInfoFromFilename = exports.uploadMultipartHelper = exports.getFlutterRequestBuilder = void 0;
const path = __importStar(require("path"));
const base_intake_url_1 = require("../../helpers/base-intake-url");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const getFlutterRequestBuilder = (apiKey, cliVersion, site) => (0, utils_1.getRequestBuilder)({
    apiKey,
    baseUrl: (0, base_intake_url_1.getBaseSourcemapIntakeUrl)(site),
    headers: new Map([
        ['DD-EVP-ORIGIN', 'datadog-ci_flutter-symbols'],
        ['DD-EVP-ORIGIN-VERSION', cliVersion],
    ]),
    overrideUrl: 'api/v2/srcmap',
});
exports.getFlutterRequestBuilder = getFlutterRequestBuilder;
// This function exists partially just to make mocking network calls easier.
const uploadMultipartHelper = (requestBuilder, payload, opts) => __awaiter(void 0, void 0, void 0, function* () { return (0, upload_1.upload)(requestBuilder)(payload, opts); });
exports.uploadMultipartHelper = uploadMultipartHelper;
const getArchInfoFromFilename = (filename) => {
    var _a;
    const parsed = path.parse(filename);
    const basename = parsed.name;
    const groups = (_a = /^.*\.(?<platform>.*)-(?<arch>.*)$/.exec(basename)) === null || _a === void 0 ? void 0 : _a.groups;
    if (!groups) {
        return undefined;
    }
    const value = {
        arch: groups.arch,
        platform: groups.platform,
    };
    if (!value.platform || !value.arch) {
        return undefined;
    }
    return value;
};
exports.getArchInfoFromFilename = getArchInfoFromFilename;
//# sourceMappingURL=helpers.js.map