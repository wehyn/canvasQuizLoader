"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceCommand = void 0;
const child_process_1 = require("child_process");
const crypto_1 = __importDefault(require("crypto"));
const os_1 = __importDefault(require("os"));
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const ci_1 = require("../../helpers/ci");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const format_git_span_data_1 = require("../../helpers/git/format-git-span-data");
const retry_1 = require("../../helpers/retry");
const tags_1 = require("../../helpers/tags");
const user_provided_git_1 = require("../../helpers/user-provided-git");
const api_1 = require("./api");
const interfaces_1 = require("./interfaces");
// We use 127 as exit code for invalid commands since that is what *sh terminals return
const BAD_COMMAND_EXIT_CODE = 127;
class TraceCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.command = clipanion_1.Option.Rest({ required: 1 });
        this.measures = clipanion_1.Option.Array('--measures');
        this.name = clipanion_1.Option.String('--name');
        this.noFail = clipanion_1.Option.Boolean('--no-fail');
        this.dryRun = clipanion_1.Option.Boolean('--dry-run');
        this.tags = clipanion_1.Option.Array('--tags');
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.config = {
            apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
            envVarTags: process.env.DD_TAGS,
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            if (!this.command || !this.command.length) {
                this.context.stderr.write('Missing command to run\n');
                return 1;
            }
            const [command, ...args] = this.command;
            const id = crypto_1.default.randomBytes(5).toString('hex');
            const startTime = new Date().toISOString();
            const childProcess = (0, child_process_1.spawn)(command, args, {
                env: Object.assign(Object.assign({}, process.env), { DD_CUSTOM_PARENT_ID: id }),
                stdio: ['inherit', 'inherit', 'pipe'],
            });
            const chunks = [];
            childProcess.stderr.pipe(this.context.stderr);
            const stderrCatcher = new Promise((resolve, reject) => {
                childProcess.stderr.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
                childProcess.stderr.on('error', (err) => reject(err));
                childProcess.stderr.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
            });
            const [status, signal] = yield new Promise((resolve, reject) => {
                childProcess.on('error', (error) => {
                    reject(error);
                });
                childProcess.on('close', (exitStatus, exitSignal) => {
                    resolve([exitStatus, exitSignal]);
                });
            });
            const stderr = yield stderrCatcher;
            const endTime = new Date().toISOString();
            const exitCode = (_a = status !== null && status !== void 0 ? status : this.signalToNumber(signal)) !== null && _a !== void 0 ? _a : BAD_COMMAND_EXIT_CODE;
            const provider = (0, ci_1.getCIProvider)();
            if (!interfaces_1.SUPPORTED_PROVIDERS.includes(provider)) {
                if (this.noFail) {
                    this.context.stdout.write(`Unsupported CI provider "${provider}". Not failing since the --no-fail option was used.\n`);
                    return exitCode;
                }
                this.context.stdout.write(`Unsupported CI provider "${provider}". Supported providers are: ${interfaces_1.SUPPORTED_PROVIDERS.join(', ')}\n`);
                return 1;
            }
            const ciSpanTags = (0, ci_1.getCISpanTags)();
            const commandStr = this.command.join(' ');
            const envVarTags = this.config.envVarTags ? (0, tags_1.parseTags)(this.config.envVarTags.split(',')) : {};
            const cliTags = this.tags ? (0, tags_1.parseTags)(this.tags) : {};
            const cliMeasures = this.measures ? (0, tags_1.parseTags)(this.measures) : {};
            const measures = Object.entries(cliMeasures).reduce((acc, [key, value]) => {
                const parsedValue = parseFloat(value);
                if (!isNaN(parsedValue)) {
                    return Object.assign(Object.assign({}, acc), { [key]: parsedValue });
                }
                return acc;
            }, {});
            const gitSpanTags = yield (0, format_git_span_data_1.getGitMetadata)();
            const userGitSpanTags = (0, user_provided_git_1.getUserGitSpanTags)();
            yield this.reportCustomSpan({
                ci_provider: provider,
                span_id: id,
                command: commandStr,
                name: (_b = this.name) !== null && _b !== void 0 ? _b : commandStr,
                start_time: startTime,
                end_time: endTime,
                error_message: stderr,
                exit_code: exitCode,
                tags: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, gitSpanTags), ciSpanTags), userGitSpanTags), cliTags), envVarTags),
                measures,
            });
            return exitCode;
        });
    }
    getApiHelper() {
        if (!this.config.apiKey) {
            this.context.stdout.write(`Neither ${chalk_1.default.red.bold('DATADOG_API_KEY')} nor ${chalk_1.default.red.bold('DD_API_KEY')} is in your environment.\n`);
            throw new Error('API key is missing');
        }
        return (0, api_1.apiConstructor)(this.getBaseIntakeUrl(), this.config.apiKey);
    }
    getBaseIntakeUrl() {
        const site = process.env.DATADOG_SITE || process.env.DD_SITE || 'datadoghq.com';
        return `https://api.${site}`;
    }
    reportCustomSpan(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dryRun) {
                this.context.stdout.write(`${chalk_1.default.green.bold('[DRY-RUN]')} Reporting custom span: ${JSON.stringify(payload)}\n`);
                return;
            }
            const api = this.getApiHelper();
            try {
                yield (0, retry_1.retryRequest)(() => api.reportCustomSpan(payload), {
                    onRetry: (e, attempt) => {
                        this.context.stderr.write(chalk_1.default.yellow(`[attempt ${attempt}] Could not report custom span. Retrying...: ${e.message}\n`));
                    },
                    retries: 5,
                });
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
    signalToNumber(signal) {
        if (!signal) {
            return undefined;
        }
        return os_1.default.constants.signals[signal] + 128;
    }
    handleError(error) {
        this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} Failed to report custom span: ` +
            `${error.response ? JSON.stringify(error.response.data, undefined, 2) : ''}\n`);
    }
}
exports.TraceCommand = TraceCommand;
TraceCommand.paths = [['trace']];
TraceCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Trace a command with a custom span and report it to Datadog.',
    details: `
      This command wraps another command, which it will launch, and report a custom span to Datadog.\n
      See README for details.
    `,
    examples: [
        [
            'Trace a command with name "Say Hello" and report to Datadog',
            'datadog-ci trace --name "Say Hello" -- echo "Hello World"',
        ],
        [
            'Trace a command with name "Say Hello", extra tags and measures and report to Datadog',
            'datadog-ci trace --name "Say Hello" --tags key1:value1 --tags key2:value2 --measures key3:3.5 --measures key4:8 -- echo "Hello World"',
        ],
        [
            'Trace a command and report to the datadoghq.eu site',
            'DD_SITE=datadoghq.eu datadog-ci trace -- echo "Hello World"',
        ],
    ],
});
//# sourceMappingURL=trace.js.map