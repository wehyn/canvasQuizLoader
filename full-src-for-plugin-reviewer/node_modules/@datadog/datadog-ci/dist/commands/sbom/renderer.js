"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderPayloadWarning = exports.renderSuccessfulCommand = exports.renderUploading = exports.renderFailedUpload = exports.renderNoDefaultBranch = exports.renderDuplicateUpload = exports.renderInvalidPayload = exports.renderInvalidFile = void 0;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../junit/utils");
const validation_1 = require("./validation");
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
    INFO: 'ℹ️',
};
const renderInvalidFile = (sbomReport) => {
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.FAILED} Invalid SBOM report file ${reportPath}.\n`);
    fullStr += chalk_1.default.red(`The report is not a valid SBOM or is not compliant with our json schema.\n`);
    return fullStr;
};
exports.renderInvalidFile = renderInvalidFile;
const renderInvalidPayload = (sbomReport) => {
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`Cannot generate payload for file ${reportPath}.\n`);
    fullStr += chalk_1.default.red(`Make sure you run the command inside a git repository and the SBOM file is valid\n`);
    return fullStr;
};
exports.renderInvalidPayload = renderInvalidPayload;
const renderDuplicateUpload = (sha, env, service) => {
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.WARNING}  Duplicate SBOM upload detected\n`);
    fullStr += chalk_1.default.red(`An analysis has already been processed for sha:${sha} env:${env} service:${service}\n`);
    fullStr += chalk_1.default.red(`Push a new commit or specify a different env or service variable\n`);
    fullStr += chalk_1.default.red(`Exiting with code 0\n`);
    return fullStr;
};
exports.renderDuplicateUpload = renderDuplicateUpload;
const renderNoDefaultBranch = (repositoryUrl) => {
    let fullStr = '';
    fullStr += chalk_1.default.red(`Default branch not found for repository ${repositoryUrl}\n`);
    fullStr += chalk_1.default.red(`Fix this issue by either:\n`);
    fullStr += chalk_1.default.red(` - define a default branch in the repository settings on Datadog\n`);
    fullStr += chalk_1.default.red(` - push result from your default branch first\n\n`);
    fullStr += chalk_1.default.red(`Run an analysis once the issue is resolved\n`);
    return fullStr;
};
exports.renderNoDefaultBranch = renderNoDefaultBranch;
const renderFailedUpload = (sbomReport, error) => {
    var _a;
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.FAILED}  Failed upload SBOM file ${reportPath}: ${error.message}\n`);
    if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) {
        fullStr += chalk_1.default.red(`API status code: ${error.response.status}\n`);
    }
    return fullStr;
};
exports.renderFailedUpload = renderFailedUpload;
const renderUploading = (sbomReport, scaRequest) => {
    const languages = new Set();
    for (const dep of scaRequest.dependencies) {
        languages.add(dep.language.toString());
    }
    return `Uploading SBOM report in ${sbomReport} (${scaRequest.dependencies.length} dependencies detected for languages ${Array.from(languages).join(',')})\nUpload for repository ${scaRequest.repository.url}, branch ${scaRequest.commit.branch}\n`;
};
exports.renderUploading = renderUploading;
const renderSuccessfulCommand = (duration) => {
    let fullStr = '';
    fullStr += chalk_1.default.green(`${ICONS.SUCCESS} Uploaded file in ${duration} seconds.\n`);
    fullStr += chalk_1.default.green(`${ICONS.INFO}  Results available on ${(0, utils_1.getBaseUrl)()}ci/code-analysis\n`);
    fullStr += chalk_1.default.green('=================================================================================================\n');
    return fullStr;
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderPayloadWarning = (dependencies) => {
    let ret = '';
    for (const dep of dependencies) {
        if (!(0, validation_1.validateDependencyName)(dep)) {
            ret += `invalid dependency name ${dep.name}\n`;
        }
    }
    return ret;
};
exports.renderPayloadWarning = renderPayloadWarning;
//# sourceMappingURL=renderer.js.map