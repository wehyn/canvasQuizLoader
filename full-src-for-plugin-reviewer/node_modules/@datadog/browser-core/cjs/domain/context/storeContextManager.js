"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storeContextManager = storeContextManager;
exports.buildStorageKey = buildStorageKey;
exports.removeStorageListeners = removeStorageListeners;
const addEventListener_1 = require("../../browser/addEventListener");
const mergeInto_1 = require("../../tools/mergeInto");
const objectUtils_1 = require("../../tools/utils/objectUtils");
const CONTEXT_STORE_KEY_PREFIX = '_dd_c';
const storageListeners = [];
function storeContextManager(configuration, contextManager, productKey, customerDataType) {
    const storageKey = buildStorageKey(productKey, customerDataType);
    storageListeners.push((0, addEventListener_1.addEventListener)(configuration, window, "storage" /* DOM_EVENT.STORAGE */, ({ key }) => {
        if (storageKey === key) {
            synchronizeWithStorage();
        }
    }));
    contextManager.changeObservable.subscribe(dumpToStorage);
    const contextFromStorage = (0, mergeInto_1.combine)(getFromStorage(), contextManager.getContext());
    if (!(0, objectUtils_1.isEmptyObject)(contextFromStorage)) {
        contextManager.setContext(contextFromStorage);
    }
    function synchronizeWithStorage() {
        contextManager.setContext(getFromStorage());
    }
    function dumpToStorage() {
        localStorage.setItem(storageKey, JSON.stringify(contextManager.getContext()));
    }
    function getFromStorage() {
        const rawContext = localStorage.getItem(storageKey);
        return rawContext ? JSON.parse(rawContext) : {};
    }
}
function buildStorageKey(productKey, customerDataType) {
    return `${CONTEXT_STORE_KEY_PREFIX}_${productKey}_${customerDataType}`;
}
function removeStorageListeners() {
    storageListeners.map((listener) => listener.stop());
}
//# sourceMappingURL=storeContextManager.js.map