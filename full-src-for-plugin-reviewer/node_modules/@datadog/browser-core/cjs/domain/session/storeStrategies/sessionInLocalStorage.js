"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectLocalStorageStrategy = selectLocalStorageStrategy;
exports.initLocalStorageStrategy = initLocalStorageStrategy;
const stringUtils_1 = require("../../../tools/utils/stringUtils");
const sessionConstants_1 = require("../sessionConstants");
const sessionState_1 = require("../sessionState");
const sessionStoreStrategy_1 = require("./sessionStoreStrategy");
const LOCAL_STORAGE_TEST_KEY = '_dd_test_';
function selectLocalStorageStrategy() {
    try {
        const id = (0, stringUtils_1.generateUUID)();
        const testKey = `${LOCAL_STORAGE_TEST_KEY}${id}`;
        localStorage.setItem(testKey, id);
        const retrievedId = localStorage.getItem(testKey);
        localStorage.removeItem(testKey);
        return id === retrievedId ? { type: sessionConstants_1.SessionPersistence.LOCAL_STORAGE } : undefined;
    }
    catch (_a) {
        return undefined;
    }
}
function initLocalStorageStrategy(configuration) {
    return {
        isLockEnabled: false,
        persistSession: persistInLocalStorage,
        retrieveSession: retrieveSessionFromLocalStorage,
        expireSession: (sessionState) => expireSessionFromLocalStorage(sessionState, configuration),
    };
}
function persistInLocalStorage(sessionState) {
    localStorage.setItem(sessionStoreStrategy_1.SESSION_STORE_KEY, (0, sessionState_1.toSessionString)(sessionState));
}
function retrieveSessionFromLocalStorage() {
    const sessionString = localStorage.getItem(sessionStoreStrategy_1.SESSION_STORE_KEY);
    return (0, sessionState_1.toSessionState)(sessionString);
}
function expireSessionFromLocalStorage(previousSessionState, configuration) {
    persistInLocalStorage((0, sessionState_1.getExpiredSessionState)(previousSessionState, configuration));
}
//# sourceMappingURL=sessionInLocalStorage.js.map