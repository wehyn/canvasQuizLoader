"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initConsoleObservable = initConsoleObservable;
exports.resetConsoleObservable = resetConsoleObservable;
const error_1 = require("../error/error");
const observable_1 = require("../../tools/observable");
const display_1 = require("../../tools/display");
const monitor_1 = require("../../tools/monitor");
const sanitize_1 = require("../../tools/serialisation/sanitize");
const jsonStringify_1 = require("../../tools/serialisation/jsonStringify");
const error_types_1 = require("../error/error.types");
const computeStackTrace_1 = require("../../tools/stackTrace/computeStackTrace");
const handlingStack_1 = require("../../tools/stackTrace/handlingStack");
const timeUtils_1 = require("../../tools/utils/timeUtils");
let consoleObservablesByApi = {};
function initConsoleObservable(apis) {
    const consoleObservables = apis.map((api) => {
        if (!consoleObservablesByApi[api]) {
            consoleObservablesByApi[api] = createConsoleObservable(api); // we are sure that the observable created for this api will yield the expected ConsoleLog type
        }
        return consoleObservablesByApi[api];
    });
    return (0, observable_1.mergeObservables)(...consoleObservables);
}
function resetConsoleObservable() {
    consoleObservablesByApi = {};
}
function createConsoleObservable(api) {
    return new observable_1.Observable((observable) => {
        const originalConsoleApi = display_1.globalConsole[api];
        display_1.globalConsole[api] = (...params) => {
            originalConsoleApi.apply(console, params);
            const handlingStack = (0, handlingStack_1.createHandlingStack)('console error');
            (0, monitor_1.callMonitored)(() => {
                observable.notify(buildConsoleLog(params, api, handlingStack));
            });
        };
        return () => {
            display_1.globalConsole[api] = originalConsoleApi;
        };
    });
}
function buildConsoleLog(params, api, handlingStack) {
    const message = params.map((param) => formatConsoleParameters(param)).join(' ');
    let error;
    if (api === display_1.ConsoleApiName.error) {
        const firstErrorParam = params.find(error_1.isError);
        error = {
            stack: firstErrorParam ? (0, handlingStack_1.toStackTraceString)((0, computeStackTrace_1.computeStackTrace)(firstErrorParam)) : undefined,
            fingerprint: (0, error_1.tryToGetFingerprint)(firstErrorParam),
            causes: firstErrorParam ? (0, error_1.flattenErrorCauses)(firstErrorParam, 'console') : undefined,
            startClocks: (0, timeUtils_1.clocksNow)(),
            message,
            source: error_types_1.ErrorSource.CONSOLE,
            handling: "handled" /* ErrorHandling.HANDLED */,
            handlingStack,
            context: (0, error_1.tryToGetErrorContext)(firstErrorParam),
        };
    }
    return {
        api,
        message,
        error,
        handlingStack,
    };
}
function formatConsoleParameters(param) {
    if (typeof param === 'string') {
        return (0, sanitize_1.sanitize)(param);
    }
    if ((0, error_1.isError)(param)) {
        return (0, handlingStack_1.formatErrorMessage)((0, computeStackTrace_1.computeStackTrace)(param));
    }
    return (0, jsonStringify_1.jsonStringify)((0, sanitize_1.sanitize)(param), undefined, 2);
}
//# sourceMappingURL=consoleObservable.js.map