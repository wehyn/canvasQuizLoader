"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackRuntimeError = trackRuntimeError;
exports.instrumentOnError = instrumentOnError;
exports.instrumentUnhandledRejection = instrumentUnhandledRejection;
const instrumentMethod_1 = require("../../tools/instrumentMethod");
const timeUtils_1 = require("../../tools/utils/timeUtils");
const computeStackTrace_1 = require("../../tools/stackTrace/computeStackTrace");
const error_1 = require("./error");
const error_types_1 = require("./error.types");
function trackRuntimeError(errorObservable) {
    const handleRuntimeError = (stackTrace, originalError) => {
        const rawError = (0, error_1.computeRawError)({
            stackTrace,
            originalError,
            startClocks: (0, timeUtils_1.clocksNow)(),
            nonErrorPrefix: "Uncaught" /* NonErrorPrefix.UNCAUGHT */,
            source: error_types_1.ErrorSource.SOURCE,
            handling: "unhandled" /* ErrorHandling.UNHANDLED */,
        });
        errorObservable.notify(rawError);
    };
    const { stop: stopInstrumentingOnError } = instrumentOnError(handleRuntimeError);
    const { stop: stopInstrumentingOnUnhandledRejection } = instrumentUnhandledRejection(handleRuntimeError);
    return {
        stop: () => {
            stopInstrumentingOnError();
            stopInstrumentingOnUnhandledRejection();
        },
    };
}
function instrumentOnError(callback) {
    return (0, instrumentMethod_1.instrumentMethod)(window, 'onerror', ({ parameters: [messageObj, url, line, column, errorObj] }) => {
        let stackTrace;
        if ((0, error_1.isError)(errorObj)) {
            stackTrace = (0, computeStackTrace_1.computeStackTrace)(errorObj);
        }
        else {
            stackTrace = (0, computeStackTrace_1.computeStackTraceFromOnErrorMessage)(messageObj, url, line, column);
        }
        callback(stackTrace, errorObj !== null && errorObj !== void 0 ? errorObj : messageObj);
    });
}
function instrumentUnhandledRejection(callback) {
    return (0, instrumentMethod_1.instrumentMethod)(window, 'onunhandledrejection', ({ parameters: [e] }) => {
        const reason = e.reason || 'Empty reason';
        const stack = (0, computeStackTrace_1.computeStackTrace)(reason);
        callback(stack, reason);
    });
}
//# sourceMappingURL=trackRuntimeError.js.map