"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCookie = setCookie;
exports.getCookie = getCookie;
exports.getInitCookie = getInitCookie;
exports.resetInitCookies = resetInitCookies;
exports.deleteCookie = deleteCookie;
exports.areCookiesAuthorized = areCookiesAuthorized;
exports.getCurrentSite = getCurrentSite;
const display_1 = require("../tools/display");
const timeUtils_1 = require("../tools/utils/timeUtils");
const stringUtils_1 = require("../tools/utils/stringUtils");
function setCookie(name, value, expireDelay = 0, options) {
    const date = new Date();
    date.setTime(date.getTime() + expireDelay);
    const expires = `expires=${date.toUTCString()}`;
    const sameSite = options && options.crossSite ? 'none' : 'strict';
    const domain = options && options.domain ? `;domain=${options.domain}` : '';
    const secure = options && options.secure ? ';secure' : '';
    const partitioned = options && options.partitioned ? ';partitioned' : '';
    document.cookie = `${name}=${value};${expires};path=/;samesite=${sameSite}${domain}${secure}${partitioned}`;
}
function getCookie(name) {
    return (0, stringUtils_1.findCommaSeparatedValue)(document.cookie, name);
}
let initCookieParsed;
/**
 * Returns a cached value of the cookie. Use this during SDK initialization (and whenever possible)
 * to avoid accessing document.cookie multiple times.
 */
function getInitCookie(name) {
    if (!initCookieParsed) {
        initCookieParsed = (0, stringUtils_1.findCommaSeparatedValues)(document.cookie);
    }
    return initCookieParsed.get(name);
}
function resetInitCookies() {
    initCookieParsed = undefined;
}
function deleteCookie(name, options) {
    setCookie(name, '', 0, options);
}
function areCookiesAuthorized(options) {
    if (document.cookie === undefined || document.cookie === null) {
        return false;
    }
    try {
        // Use a unique cookie name to avoid issues when the SDK is initialized multiple times during
        // the test cookie lifetime
        const testCookieName = `dd_cookie_test_${(0, stringUtils_1.generateUUID)()}`;
        const testCookieValue = 'test';
        setCookie(testCookieName, testCookieValue, timeUtils_1.ONE_MINUTE, options);
        const isCookieCorrectlySet = getCookie(testCookieName) === testCookieValue;
        deleteCookie(testCookieName, options);
        return isCookieCorrectlySet;
    }
    catch (error) {
        display_1.display.error(error);
        return false;
    }
}
/**
 * No API to retrieve it, number of levels for subdomain and suffix are unknown
 * strategy: find the minimal domain on which cookies are allowed to be set
 * https://web.dev/same-site-same-origin/#site
 */
let getCurrentSiteCache;
function getCurrentSite() {
    if (getCurrentSiteCache === undefined) {
        // Use a unique cookie name to avoid issues when the SDK is initialized multiple times during
        // the test cookie lifetime
        const testCookieName = `dd_site_test_${(0, stringUtils_1.generateUUID)()}`;
        const testCookieValue = 'test';
        const domainLevels = window.location.hostname.split('.');
        let candidateDomain = domainLevels.pop();
        while (domainLevels.length && !getCookie(testCookieName)) {
            candidateDomain = `${domainLevels.pop()}.${candidateDomain}`;
            setCookie(testCookieName, testCookieValue, timeUtils_1.ONE_SECOND, { domain: candidateDomain });
        }
        deleteCookie(testCookieName, { domain: candidateDomain });
        getCurrentSiteCache = candidateDomain;
    }
    return getCurrentSiteCache;
}
//# sourceMappingURL=cookie.js.map